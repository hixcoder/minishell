echo
echo -n
cd 
pwd
export
unset
env
exit

echo $?
echo "cat lol.c | cat > lol.c"
echo "cat lol.c | cat > lol.c"
echo '$USER'

c1 a1 a2 a3  | c2 a1 a2 |c3 a1 "a2 |a3 a4"

expand tests:
ls -la | "$U rr$USER"
ls '-la' | "$U rr$USER"
'l's' '-la' '|' '"$U rr$USER"'
ls -la | "$US $USER r $U $USE$U rr$x"
"$U $PATH $_x I"
"$a $b lkl $c $pi $bq I$hix"
"cou'cou"$lol'$USER '



USER=hboumahd
PATH=/Users/hboumahd/goinfre/.brew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/munki:/Users/hboumahd/goinfre/.brew/bin
LOGNAME=hboumahd
SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.lztunhQfmP/Listeners
HOME=/Users/hboumahd
SHELL=/bin/zsh
__CF_USER_TEXT_ENCODING=0x18D72:0x0:0x0
TMPDIR=/var/folders/zz/zyxvpxvq6csfxvn_n000cdf80033bk/T/
XPC_SERVICE_NAME=0
XPC_FLAGS=0x0
ORIGINAL_XDG_CURRENT_DESKTOP=undefined
SHLVL=1
PWD=/Users/hboumahd/Desktop/minishell
OLDPWD=/Users/hboumahd/Desktop/minishell
HOMEBREW_NO_AUTO_UPDATE=1
TERM_PROGRAM=vscode
TERM_PROGRAM_VERSION=1.67.0
LANG=en_US.UTF-8
COLORTERM=truecolor
VSCODE_GIT_IPC_HANDLE=/var/folders/zz/zyxvpxvq6csfxvn_n000cdf80033bk/T/vscode-git-4e63fc1b51.sock
VSCODE_GIT_ASKPASS_NODE=/Applications/Visual Studio Code.app/Contents/MacOS/Electron
VSCODE_GIT_ASKPASS_EXTRA_ARGS=--ms-enable-electron-run-as-node
VSCODE_GIT_ASKPASS_MAIN=/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass-main.js
GIT_ASKPASS=/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass.sh
TERM=xterm-256color
LS=ls -la
_=/usr/bin/env







/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parse.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hboumahd <hboumahd@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/07/02 13:19:31 by hboumahd          #+#    #+#             */
/*   Updated: 2022/08/03 13:48:37 by hboumahd         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../minishell.h"

char    *ft_type_printer(Type t)
{
    if (t == FILE_IN)
        return ("FILE_IN");
    else if (t == FILE_OUT)
        return ("FILE_OUT");
    else if (t == HERE_DOC)
        return ("HERE_DOC");
    else if (t == FILE_OUT_APND)
        return ("FILE_OUT_APND");
    else
        return ("ARG");
}

// here I print the values of data->cmds
void ft_print_values(t_data *data, int st)
{
	int j;
	if (data->cmds == NULL)
		return ;
	printf("===========================\n");
	j = -1;
	while (++j < data->cmds_len)
	{
		printf("data->cmds[%d].cmd->w : %s\n", j, data->cmds[j].cmd->w);
		int k = -1;
		while (data->cmds[j].atr[++k] && st == 1)
			printf("data->cmds[%d].atr[%d]->w : %s\n", j, k, data->cmds[j].atr[k]->w);
		// while (data->cmds[j].atr[++k] && st == 2)
		// 	printf("data->cmds[%d].atr[%d]->w : %s<%s>\n", j, k, data->cmds[j].atr[k]->w,ft_type_printer(data->cmds[j].atr[k]->t));
	}
}

void    ft_readline(t_data *data)
{
	while (1)
	{
		data->args = readline("Minishell ++> ");
		if (ft_strlen(data->args) > 0)
			add_history(data->args);
		printf("args : %s\n", data->args);
		// check if quotes are closed
		if (ft_check_quotes(data->args) == 1)
		{
			printf("syntax error: unclosed quotes\n");
			continue;
		}
		ft_spliter(data);
		ft_print_values(data, 1);
		
		ft_expander(data);
		ft_print_values(data, 1);

		// ft_tokenizer(data);
		// ft_print_values(data, 2);
	}
}






// this function gives the type of each cmd and atr
void	ft_tokenizer(t_data *data)
{
	int i;
	int j;
	
	i = -1;
	while (++i < data->cmds_len)
	{
		j = -1;
		data->cmds[i].cmd->t = ft_tokenize(data->cmds[i].cmd->w);
		while (data->cmds[i].atr[++j])
			data->cmds[i].atr[j]->t = ft_tokenize(data->cmds[i].atr[j]->w);
	}
}